import os
import openai
import streamlit as st
import requests
from bs4 import BeautifulSoup
import markdownify
from time import perf_counter
from streamlit_pills import pills 


from components.sidebar import sidebar

st.set_page_config(
    page_title="Khlinic writer",
    page_icon="üñäÔ∏è",
)


st.header("üñäÔ∏è Khlinic writer")
st.markdown("---")

if "shared" not in st.session_state:
   st.session_state["shared"] = True

sidebar()

openai.api_key = st.session_state.get("OPENAI_API_KEY")

st.markdown("### R√©digeons de meilleures pages que les concurrents üëÄ")

suggestion = pills("", ["Avec suggestions", "Pas de suggestions"], ["üéâ", "üö´"])
with st.expander("Concurrence", expanded=False):
    link_1 = st.text_input("Concurrent n¬∞1", placeholder="Lien")
    link_2 = st.text_input("Concurrent n¬∞2", placeholder="Lien")
    link_3 = st.text_input("Concurrent n¬∞3", placeholder="Lien")
    
    #text_1 = st.text_area("Concurrent n¬∞1", placeholder="Contenu")
    #text_2 = st.text_area("Concurrent n¬∞2", placeholder="Contenu")
    #text_3 = st.text_area("Concurrent n¬∞3", placeholder="Contenu")
with st.expander("Plan de contenu", expanded=False):
    title = st.text_input("Titre", placeholder="Le titre de l'article")
    plan = st.text_area("Plan", placeholder="Le plan de l'article")
    keywords = st.text_area("Mots-cl√©s", placeholder="Les mots-cl√©s √† utiliser")


col1, col2, col3 = st.columns([2, 2,1])
submit = col3.button("R√©diger ‚úçüèª", use_container_width=1)

def parser(link):
    res = requests.get(link)
    html_page = res.content
    soup = BeautifulSoup(html_page, 'html.parser')
    tags = soup.findAll('img')
    for match in tags:
        match.decompose()
    tags = soup.findAll('picture')
    for match in tags:
        match.decompose()
    tags = soup.findAll('head')
    for match in tags:
        match.decompose()
    tags = soup.findAll('header')
    for match in tags:
        match.decompose()
    tags = soup.findAll('script')
    for match in tags:
        match.decompose()
    tags = soup.findAll('noscript')
    for match in tags:
        match.decompose()
    tags = soup.findAll('a')
    for match in tags:
        del match["href"]
    tags = soup.findAll('div')
    for match in tags:
        del match["class"]
        del match["id"]
        del match["role"]
    
    if str(soup.find('article')) != 'None':
        main = soup.find('article')
    elif str(soup.find('main')) != 'None':
        main = soup.find('main')
    else:
        main = soup.find('body')
    cleaned_html = str(main)
    markdown_text = markdownify.markdownify(cleaned_html)
    return markdown_text
def markdown_generator(text):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        temperature=st.session_state.get("TEMPERATURE"),
        max_tokens=st.session_state.get("MAX_TOKENS"),
        top_p=1,
        frequency_penalty=st.session_state.get("FREQUENCY_PENALTY"),
        presence_penalty=st.session_state.get("PRESENCE_PENALTY"),
        messages=[{"role": "system", "content": "√Ä partir du code markdown suivant, extraies l'article principal sous format markdown. Ne conserve que les H1, H2, H3, H4, H5, H6, les paragraphes et les listes contenues dans le corps principal de l'article. Supprime les sections √† lire √©galement, cat√©gories, les cr√©dits, etc..."},
                        {"role": "user", "content": text}]
    )
    return response["choices"][0]["message"]["content"]
    
def concurrent_analyzer(text):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        temperature=st.session_state.get("TEMPERATURE"),
        max_tokens=st.session_state.get("MAX_TOKENS"),
        top_p=1,
        frequency_penalty=st.session_state.get("FREQUENCY_PENALTY"),
        presence_penalty=st.session_state.get("PRESENCE_PENALTY"),
        messages=[{"role": "system", "content": "Ignore toutes les instructions avant celle-ci. Tu es un r√©dacteur web expert en m√©dical. Tu as r√©dig√© des articles m√©dicaux pour les sites de m√©decins depuis 20 ans. Ta t√¢che est maintenant de r√©diger un article m√©dical. Les internautes qui consulteront cette page chercheront principalement √† prendre des informations sur ce sujet avant de prendre rendez-vous chez leur m√©decin. Dans un premier temps, j'ai besoin que tu extraies toutes les informations de mani√®re exhaustive sur cette page sous forme de liste. Reprends toutes les informations m√©dicales, biologiques, physiologiques, chirurgicales, historiques et les conseils. Conserve l'ensemble des d√©tails. Ne parle pas de la clinique ou du chirurgien ayant √©cris l'article. Voici le texte √† analyser :"},
                        {"role": "user", "content": text}]
    )
    return response["choices"][0]["message"]["content"]

def concurrent_sumerizer(response_1, response_2, response_3):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        temperature=st.session_state.get("TEMPERATURE"),
        max_tokens=st.session_state.get("MAX_TOKENS"),
        top_p=1,
        frequency_penalty=st.session_state.get("FREQUENCY_PENALTY"),
        presence_penalty=st.session_state.get("PRESENCE_PENALTY"),
        messages=[{"role": "system", "content": "Ignore toutes les instructions avant celle-ci. Remets toutes les informations contenues dans les textes 1, 2 et 3 sous forme d'une seule liste compl√®te. N'oublie aucune information contenue dans les 3 textes."},
                        {"role": "user", "content": "[TEXTE 1 : ]\n" + response_1 + "\n [TEXTE 2 : ]\n" + response_2 + "\n [TEXTE 3 : ]\n" + response_3}]
    )
    return response["choices"][0]["message"]["content"]

def writer(infos, title, plan, keywords):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        temperature=st.session_state.get("TEMPERATURE"),
        max_tokens=st.session_state.get("MAX_TOKENS"),
        top_p=1,
        frequency_penalty=st.session_state.get("FREQUENCY_PENALTY"),
        presence_penalty=st.session_state.get("PRESENCE_PENALTY"),
        messages=[{"role": "system", "content": "Ignore toutes les instructions avant celle-ci. Tu es un r√©dacteur web expert en m√©dical. Tu as r√©dig√© des articles m√©dicaux pour les sites de m√©decins depuis 20 ans. Ta t√¢che est maintenant de r√©diger un article m√©dical. Les internautes qui consulteront cette page chercheront principalement √† prendre des informations sur ce sujet avant de prendre rendez-vous chez leur m√©decine. Voici le ton de la marque pour laquelle tu devras r√©diger : Le ton de la marque est hautement professionnel et informatif. La marque communique de mani√®re d√©taill√©e, directe et pr√©cise, fournissant des informations compl√®tes √† son public. Il y a un √©l√©ment de soin et de consid√©ration notable, trouvant un √©quilibre entre les conseils formels d'un professionnel de la sant√© et une communication empathique. Les attributs de langage gravitent autour de la terminologie m√©dicale, du langage orient√© vers la sant√©, des explications m√©thodiques et une emphase sur les d√©tails. Le persona de la marque semble √™tre celui d'un expert du secteur comp√©tent, fiable et minutieux qui privil√©gie le bien-√™tre des individus qu'il sert. Leur style se concentre sur l'instauration de la confiance, la d√©monstration d'expertise et l'assurance de la transparence dans la communication. Ta t√¢che est maintenant de r√©diger un article ayant pour titre principal [TITRE]. tu vas devoir passer √† la r√©daction de l'article, je vais te donner le plan de contenu et le brief de chaque paragraphe. Tu dois utiliser ce plan et r√©diger l'ensemble des paragraphes de mani√®re d√©taill√©e, en expliquant chaque bullet point. Illustre tes propos avec des exp√©riences et des exemples. Utilise un ton de professionnel m√©dical, d'expert, avec des expressions idiomatiques. Ponctue tes phrases en ins√©rant des virgules √† des endroits pertinants. Utilise un maximum de d√©tails, de language technique, scientifique et physiologique. Utilise le vouvoiement et le terme ¬´¬†patient¬†¬ª au lieu d‚Äôindividu ou personne. Ponctue tes phrases en ins√©rant des virgules √† des endroits pertinents. Ins√®re des phrases de transition naturelles et professionnelles entre les diff√©rentes parties du texte. Le lecteur est un patient s‚Äôint√©ressant aux soins mentionn√©s, il recherche une information claire, pr√©cise et exhaustive. Utilise les mots-cl√©s inclus dans [KEYWORDS]. Et le plan [PLAN] sous format Markdown , dont tu dois conserver le balisage et l‚Äôensemble des titres. Les informations que tu dois inclures obligatoirement sont pr√©sentes dans [INFOS] et compl√©ter cette base de connaissance avec tes propres informations. Utilise des listes num√©rot√©es et non num√©rot√©es si besoin. R√©dige 1500 √† 2000 mots."},
                        {"role": "user", "content": "[INFOS : ]\n" + infos + "\n [TITLE : ]\n" + title + "\n [PLAN : ]\n" + plan + "\n [KEYWORDS : ]\n" + keywords}]
    )
    return response["choices"][0]["message"]["content"]
    
def better_keywords(text, keywords):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        temperature=st.session_state.get("TEMPERATURE"),
        max_tokens=st.session_state.get("MAX_TOKENS"),
        top_p=1,
        frequency_penalty=st.session_state.get("FREQUENCY_PENALTY"),
        presence_penalty=st.session_state.get("PRESENCE_PENALTY"),
        messages=[{"role": "system", "content": "Ignore toutes les instructions avant celle-ci. Tu es un r√©dacteur web expert en m√©dical. Tu as r√©dig√© des articles m√©dicaux pour les sites de m√©decins depuis 20 ans. Ta t√¢che est maintenant de r√©diger un article m√©dical. Les internautes qui consulteront cette page chercheront principalement √† prendre des informations sur ce sujet avant de prendre rendez-vous chez leur m√©decine. Ta t√¢che est maintenant d‚Äôam√©liorer l‚Äôarticle contenu dans [TEXT] avec les mots-cl√©s contenus dans [KEYWORDS]. Ajoute les mots-cl√©s manquants aux endroits pertinents, sans modifier les titres, les paragraphes ou le sens du contenu. Tu dois am√©liorer s√©mantiquement le texte dans le d√©naturer."},
                        {"role": "user", "content": "[TEXT : ]\n" + text + "\n [KEYWORDS : ]\n" + keywords}]
    )
    return response["choices"][0]["message"]["content"]

def better_titles(text, infos):
    response = openai.ChatCompletion.create(
        model="gpt-4",
        temperature=st.session_state.get("TEMPERATURE"),
        max_tokens=st.session_state.get("MAX_TOKENS"),
        top_p=1,
        frequency_penalty=st.session_state.get("FREQUENCY_PENALTY"),
        presence_penalty=st.session_state.get("PRESENCE_PENALTY"),
        messages=[{"role": "system", "content": "Ignore toutes les instructions avant celle-ci. Tu es un r√©dacteur web expert en m√©dical. Tu as r√©dig√© des articles m√©dicaux pour les sites de m√©decins depuis 20 ans. Ta t√¢che est maintenant de r√©diger un article m√©dical. Les internautes qui consulteront cette page chercheront principalement √† prendre des informations sur ce sujet avant de prendre rendez-vous chez leur m√©decine. Ta t√¢che est maintenant de proposer des titres suppl√©mentaires √† inclure dans l‚Äôarticle [TEXT] √† partir des informations contenues dans la liste [INFOS]. Si des informations list√©es dans [INFOS] sont manquantes, propose moi un titre et un texte de paragraphe par id√©e."},
                        {"role": "user", "content": "[TEXT : ]\n" + text + "\n [INFOS : ]\n" + infos}]
    )
    return response["choices"][0]["message"]["content"]
    
if submit:

    with st.spinner("Requ√™te en cours..."):
            ts_start = perf_counter()
        
            st.markdown("### Traitement du 1er article...")
            col1, col2 = st.columns([1, 2])
            col1.info("1/9 - Scrapping de l'article...")
            text_1 = parser(link_1)
            with col2.expander("Texte n¬∞1", expanded=False):
                st.write(markdown_generator(text_1))
        
            col1, col2 = st.columns([1, 2])
            col1.info("2/9 - Analyse de l'article...")
            response_1 = concurrent_analyzer(text_1)
            with col2.expander("Analyse n¬∞1", expanded=False):
                st.write(response_1) 
            
            st.markdown("### Traitement du 2√®me article...")
            col1, col2 = st.columns([1, 2])
            col1.info("3/9 - Scrapping de l'article...")
            text_2 = parser(link_2)
            with col2.expander("Texte n¬∞2", expanded=False):
                st.write(markdown_generator(text_2))
        
            col1, col2 = st.columns([1, 2])
            col1.info("4/9 - Analyse de l'article...")
            response_2 = concurrent_analyzer(text_2)
            with col2.expander("Analyse n¬∞2", expanded=False):
                st.write(response_2)
        
            st.markdown("### Traitement du 3√®me article...")
            col1, col2 = st.columns([1, 2])
            col1.info("5/9 - Scrapping de l'article...")
            text_3 = parser(link_3)
            with col2.expander("Texte n¬∞3", expanded=False):
                st.write(markdown_generator(text_3))
                
            col1, col2 = st.columns([1, 2])
            col1.info("6/9 - Analyse de l'article...")
            response_3 = concurrent_analyzer(text_3)
            with col2.expander("Analyse n¬∞3", expanded=False):
                st.write(response_3)
                
            st.info("7/9 - Synth√®se des connaissances acquises...")
            infos = concurrent_sumerizer(response_1, response_2, response_3)
            with st.expander("Synth√®se", expanded=False):
                st.write(infos)

            st.warning("8/9 - R√©daction du premier jet...")
            first_text = writer(infos, title, plan, keywords)
            with st.expander("Texte brut", expanded=False):
                st.write(first_text)

            st.success("9/9 - Am√©lioration √† partir des mots-cl√©s...")
            final_text = better_keywords(first_text, keywords)
            with st.expander("Texte final", expanded=False):
                    st.write(final_text)

            col1, col2, col3 = st.columns([2, 2,1])
            col3.download_button(
                label="T√©l√©charger üíæ",
                data=final_text,
                file_name='texte.md',
                mime='text/markdown',
            )
            if suggestion == "Avec suggestions":
                st.warning("Proposition de titres en cours...")
                titles_to_add = better_titles(final_text, infos)
                with st.expander("Titres √† r√©viser", expanded=False):
                        st.write(titles_to_add)
        
            ts_end = perf_counter()
            st.info(f" {round(ts_end - ts_start, 3)} secondes d'ex√©cution")
